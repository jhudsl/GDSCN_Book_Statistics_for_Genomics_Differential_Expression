[["index.html", "Statistics for Genomics: Differential Expression About this Book AnVIL Collection", " Statistics for Genomics: Differential Expression March 25, 2022 About this Book This book is part of a series of books for the Genomic Data Science Analysis, Visualization, and Informatics Lab-space (AnVIL) of the National Human Genome Research Institute (NHGRI). Learn more about AnVIL by visiting https://anvilproject.org or reading the preprint. This work is also supported in part by the Genomic Data Science Community Network (GDSCN), a faculty network working toward a vision where researchers, educators, and students from diverse backgrounds are able to fully participate in genomic data science research. We encourage you to check out the GDSCN preprint. AnVIL Collection Please check out our full collection of AnVIL resources below! Book Name Link AnVIL: Getting Started https://jhudatascience.org/AnVIL_Book_Getting_Started AnVIL: Instructor Guide https://jhudatascience.org/AnVIL_Book_Instructor_Guide AnVIL: WDL https://jhudatascience.org/AnVIL_Book_WDL GDSCN: SARS Galaxy on AnVIL https://jhudatascience.org/GDSCN_Book_SARS_Galaxy_on_AnVIL GDSCN: Statistics for Genomics Differential Expression https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_Differential_Expression GDSCN: Statistics for Genomics RNA-seq https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_RNA-seq GDSCN: Statistics for Genomics SCRNA-seq https://jhudatascience.org/GDSCN_Book_Statistics_for_Genomics_SCRNA-seq "],["overview-and-learning-objectives.html", "Chapter 1 Overview and Learning Objectives 1.1 Activity Context 1.2 Learning Objectives", " Chapter 1 Overview and Learning Objectives 1.1 Activity Context Course Audience Graduate Students in Biological Sciences or related fields Course Prerequisites Layman understanding of genetics (understanding of DNA, genes, trait inheritance) Some previous exposure to the central dogma of molecular biology Class Type Lab Computer-based Class Size 1-50 Lesson Duration Assessment Type 1.2 Learning Objectives Learning objectives for this activity come from the Genetics Core Competencies: "],["getting-set-up.html", "Chapter 2 Getting Set Up 2.1 Introduction 2.2 Create a Google Account 2.3 Sign in to Terra 2.4 Share your ID", " Chapter 2 Getting Set Up 2.1 Introduction This chapter explains how to get set up to do your analyses on AnVIL. All activities will be run using RStudio, so if you choose, you can use a different RStudio interface (such as RStudio Cloud or locally installed RStudio). The Analysis, Visualization, and Informatics Lab-space (AnVIL) is a scalable and interoperable computing resource for the genomics scientific community. AnVIL enables researchers to analyze high-value open and controlled access genomic datasets with popular analysis tools in a secure cloud computing environment. AnVIL also serves as a data commons. It runs on the Google Cloud Platform (GCP) and is sponsored by NHGRI. In addition to Docker-based analysis workflows, AnVIL supports popular interactive analysis tools such as Jupyter notebooks, Bioconductor, RStudio, and Galaxy. By operating in the cloud, AnVIL users can scale analyses from a single computer to thousands and securely share data, workflows, and reproducible results with collaborators and colleagues. 2.2 Create a Google Account AnVIL uses Terra to run analyses. Terra operates on Google Cloud Platform, so you’ll need a Google account to make sure your instructor can keep track of any computing costs you accrue. If you do not already have a Google account that you would like to use for accessing Terra, create one now. Otherwise, please use a Gmail account you have already set up. If you would like to create a Google account that is associated with your non-Gmail, institutional email address, follow these instructions. 2.3 Sign in to Terra You need to sign into Terra with your Google account to allow your instructor to add you to projects and/or Workspaces associated with your specific class. This is the only way you can launch applications and perform computations on AnVIL. Launch Terra, and you should be prompted to sign in with your Google account. You can always access Terra by going to anvil.terra.bio, or by clicking the link on the AnVIL home page. 2.4 Share your ID It is very important that you share the Google account you used above with your instructor! Otherwise, they cannot add you to class projects or Workspaces. "],["workspace.html", "Chapter 3 Creating a Workspace", " Chapter 3 Creating a Workspace Now that you have an account that works with AnVIL, you are ready to get started! In this chapter, we will learn about Workspaces, the fundamental work units inside AnVIL. Once you have created a Workspace, you can launch many tools and explore datasets. We will use a Workspace to launch RStudio in the next chapter. On AnVIL, you use Workspaces to configure and run analyses and share results. Workspaces support interactive analysis with RStudio, Jupyter notebooks, Bioconductor and Galaxy. Workspaces can also save the output generated by running an analysis with a Workspace’s associated “cloud environment.” Check out https://anvilproject.org to learn more about everything you can do within a Workspace. Launch Terra on AnVIL In the drop-down menu on the left, navigate to “Workspaces”. Click the triple bar in the top left corner to access the menu. Click “Workspaces”. Click on the plus icon near the top of left of the page. Name your Workspace and select the Billing Project as indicated by your instructor. Do not change the Bucket Location or Authorization Domain. You can add a Description if you wish. Click “CREATE WORKSPACE”. The new Workspace should now show up under your Workspaces. "],["rstudio.html", "Chapter 4 Working in RStudio 4.1 Launch RStudio Cloud Environment 4.2 Tour RStudio 4.3 More Practice with iSEE 4.4 Pause RStudio 4.5 Delete RStudio Cloud Environment 4.6 Video Guide", " Chapter 4 Working in RStudio Now that you have created a Workspace, you can create an RStudio cloud environment. This will allow you to interface with data and perform genomics-based analyses with add on packages from the Bioconductor community. 4.1 Launch RStudio Cloud Environment Click on the name of the Workspace you just created. You should be routed to a link that looks like: https://anvil.terra.bio/#workspaces/&lt;billing-project&gt;/&lt;workspace-name&gt;. On the top right, Click the gear icon to access your Cloud Environment options. You will see a list of costs because it costs a small amount of money to use cloud computing. Click “CUSTOMIZE”. Click on the first drop down menu to see what other software configurations are available. Scroll down and select RStudio from the Community-Maintained RStudio Environments section. Leave everything else as-is. To create your RStudio Cloud Environment, click on the “CREATE” button. Your Cloud Environment will be available in a few minutes after the cloud resources are provisioned and your software starts up. The upper right corner displays the status and should say “Creating” while resources are being provisioned. After a few minutes, you will see the status change to “Running”. Click on the “R” icon to launch RStudio. You should now see the RStudio interface with information about the version printed to the console. 4.2 Tour RStudio Next, we will be using RStudio and the package Glimma to create interactive plots. See this vignette for more information. The Bioconductor team has created a very useful package to programmatically interact with Terra and Google Cloud. Install the AnVIL package. It will make some steps easier as we go along. BiocManager::install(&quot;AnVIL&quot;) You can now quickly install precompiled binaries using the AnVIL package’s install() function. We will use it to install the Glimma package. AnVIL::install(&quot;Glimma&quot;) Load some example data and save it as dge. dge &lt;- readRDS(system.file(&quot;RNAseq123/dge.rds&quot;, package = &quot;Glimma&quot;)) The multidimensional scaling (MDS) plot is frequently used to explore differences in samples. When this data is MDS transformed, the first two dimensions explain the greatest variance between samples, and the amount of variance decreases monotonically with increasing dimension. The following code will launch a new window where you can interact with the MDS plot. glimmaMDS(dge) Change the colour_by setting to “group” so you can easily distinguish between groups. In this data, the “group” is cell type. You can download the interactive html file by clicking on “Save As”. You can also download plots and other files created directly in RStudio. To download the following plot, click on “Export” and save in your preferred format to the default directory. This saves the file in your cloud environment. limma::plotMDS(dge) You should see the plot in the “Files” pane. Select this file and click “More” &gt; “Export” Select “Download” to save the file to your local machine. 4.3 More Practice with iSEE iSEE is a Bioconductor package that provides an interactive Shiny-based graphical user interface for exploring data stored in SummarizedExperiment objects (Rue-Albrecht et al. 2018). We will learn more about SummarizedExperiments in following chapters. Below, we will visualize an example dataset from Tasic et al. (2016). This experiment is a single-cell RNAseq experiment (scRNAseq) examining the primary visual cortex in mice, with the aim of better understanding cell diversity and taxonomy in the nervous system. Run the following. # Install and load necessary packages AnVIL::install(c(&quot;iSEE&quot;, &quot;scRNAseq&quot;, &quot;scater&quot;)) library(iSEE) # Launch interactive example example(iSEE, ask=FALSE) 4.4 Pause RStudio The upper right corner reminds you that you are accruing cloud computing costs. You should minimize charges when you are not performing an analysis. You can do this by clicking on “Stop cloud environment”. This will release the CPU and memory resources for other people to use. Note that your work will be saved in the environment and continue to accrue a very small cost. Your instructor can delete these environments to stop costs accruing, so it’s a good idea to save code or output somewhere else, such as GitHub or your local machine. 4.5 Delete RStudio Cloud Environment Stopping your cloud environment only pauses your work. When you are ready to delete the cloud environment, click on the gear icon in the upper right corner to “Update cloud environment”. Click on “Delete Environment Options”. If you are certain that you do not need the data and configuration on your disk, you should select “Delete everything, including persistent disk”. Select “DELETE”. 4.6 Video Guide In addition to the steps above, you can review this video guide on how to launch RStudio on AnVIL. The slides for this tutorial are are located here. sessionInfo() ## R version 4.0.2 (2020-06-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] knitr_1.33 magrittr_2.0.2 hms_0.5.3 R6_2.4.1 ## [5] rlang_0.4.10 highr_0.8 stringr_1.4.0 httr_1.4.2 ## [9] tools_4.0.2 xfun_0.26 png_0.1-7 jquerylib_0.1.4 ## [13] htmltools_0.5.0 ellipsis_0.3.1 ottrpal_0.1.2 yaml_2.2.1 ## [17] digest_0.6.25 tibble_3.0.3 lifecycle_1.0.0 crayon_1.3.4 ## [21] bookdown_0.24 readr_1.4.0 vctrs_0.3.4 fs_1.5.0 ## [25] curl_4.3 evaluate_0.14 rmarkdown_2.10 stringi_1.5.3 ## [29] compiler_4.0.2 pillar_1.4.6 pkgconfig_2.0.3 References "],["transforming-data.html", "Chapter 5 Transforming Data 5.1 Gene Expression Data", " Chapter 5 Transforming Data The following excerpt comes from Ritchie et al. (2015) : Measuring expression in multiple RNA samples produces columns of correlated expression values, which are highly correlated because they are measured on the same set of genes or genomic features. It has long been established in the biomedical literature that the level of agreement between correlated variables can be usefully examined by plotting differences versus means. In other words, gene expression data is full of correlations. We must think carefully about how we examine and plot gene expression data. In the next steps, we will: Examine how \\(\\log_{2}\\) transformations and fold-change improve data clarity Learn how to make MA plots on gene expression data Much of the following has been adopted from the Glimma vignette for limma and edgeR (Su et al. 2017). 5.1 Gene Expression Data First, we will load the necessary packages. # Install and load Glimma, limma, and matrixStats # AnVIL::install(c(&quot;Glimma&quot;, &quot;limma&quot;)) library(Glimma) library(limma) library(matrixStats) Load the gene expression data. We will be using data from Sheridan et al. (2015) that has already been vetted to demo plot creation. This experiment consists of three cell populations - basal, luminal progenitor (LP) and mature luminal (ML) - sorted from mice mammary glands. Each treatment consists of three replicates. The gene expression data is stored in a special list-based data class called a “DGEList” (this stands for Digital Gene Expression). # Load the gene expression data dge &lt;- readRDS(system.file(&quot;RNAseq123/dge.rds&quot;, package = &quot;Glimma&quot;)) head(dge$counts,10) ## 10_6_5_11 9_6_5_11 purep53 JMS8-2 JMS8-3 JMS8-4 JMS8-5 JMS9-P7c JMS9-P8c ## 497097 1 2 342 526 3 3 535 2 0 ## 20671 1 1 76 40 33 14 98 18 8 ## 27395 431 771 1368 1268 1564 769 818 468 342 ## 18777 768 1722 2517 1923 3865 1888 1830 1246 693 ## 21399 810 977 2472 1870 2251 1716 1932 756 619 ## 58175 452 358 17 14 622 571 12 203 224 ## 108664 1716 2678 2097 2071 5499 3630 1731 1715 1251 ## 12421 3451 2699 3399 2716 5233 6280 3647 1866 2122 ## 319263 2026 2033 3920 2715 3873 3688 3593 1609 1348 ## 59014 956 985 5497 4214 3462 2933 5336 649 731 In this data, each sample is in a column, while each gene is in a row. These raw counts range from very small to quite large numbers! References "],["plotting-expression-data.html", "Chapter 6 Plotting Expression Data 6.1 Plotting Raw Counts 6.2 Transforming (\\(\\log_{2}\\)) 6.3 Using Fold-Change", " Chapter 6 Plotting Expression Data 6.1 Plotting Raw Counts Let’s say we want to compare basal and LP samples. We will first look at the metadata. # View metadata dge$samples ## files group lib.size norm.factors lane ## 10_6_5_11 GSM1545535_10_6_5_11.txt LP 32857304 0.8943956 L004 ## 9_6_5_11 GSM1545536_9_6_5_11.txt ML 35328624 1.0250186 L004 ## purep53 GSM1545538_purep53.txt Basal 57147943 1.0459005 L004 ## JMS8-2 GSM1545539_JMS8-2.txt Basal 51356800 1.0458455 L006 ## JMS8-3 GSM1545540_JMS8-3.txt ML 75782871 1.0162707 L006 ## JMS8-4 GSM1545541_JMS8-4.txt LP 60506774 0.9217132 L006 ## JMS8-5 GSM1545542_JMS8-5.txt Basal 55073018 0.9961959 L006 ## JMS9-P7c GSM1545544_JMS9-P7c.txt ML 21305254 1.0861026 L008 ## JMS9-P8c GSM1545545_JMS9-P8c.txt LP 19955335 0.9839203 L008 We will manually take the mean across basal samples and LP samples. # Collect the counts raw_counts &lt;- dge$counts # Basal samples are columns 3, 4, and 7 basal_sample_means &lt;- rowMeans2(raw_counts[, c(3, 4, 7)]) # LP samples are columns 1, 6, and 9 LP_sample_means &lt;- rowMeans2(raw_counts[, c(1, 6, 9)]) Then we will plot the two groups. plot(basal_sample_means, LP_sample_means) This is hard to interpret. Most of the genes are clustered in the bottom left corner. 6.2 Transforming (\\(\\log_{2}\\)) Using a \\(\\log_{2}\\) transformation makes it easier to examine all the genes together. # Plot with log2 transformation plot(log2(basal_sample_means), log2(LP_sample_means)) 6.3 Using Fold-Change As stated at the very start of this chapter, plotting differences versus means can be very helpful when many genes are correlated. It also makes interpretation easier when combined with a \\(\\log_{2}\\) transformation. When basal and LP expression are equal, fold-change is equal to zero. log2(10) - log2(10) ## [1] 0 When basal expression is greater, fold-change is positive. log2(20) - log2(10) ## [1] 1 log2(100) - log2(1) ## [1] 6.643856 However when LP expression is greater, fold-change is negative. log2(10) - log2(20) ## [1] -1 log2(1) - log2(100) ## [1] -6.643856 Calculate fold-change for the data. log2_fold_change &lt;- log2(basal_sample_means) - log2(LP_sample_means) mean_expression &lt;- (log2(basal_sample_means) + log2(LP_sample_means)) / 2 Plot the values above, with mean expression on the x-axis and fold-change on the y-axis. plot(mean_expression, log2_fold_change) This gives us a very rough idea of how transformation and using fold-change can aid in interpretation of the data. In reality, we need to cover a few more steps before creating this kind of plot. "],["creating-ma-plots.html", "Chapter 7 Creating MA Plots 7.1 The Design Matrix 7.2 The Contrast Matrix 7.3 Fitting the Data 7.4 Creating an MA Plot 7.5 Interactive MA Plots 7.6 Recap", " Chapter 7 Creating MA Plots In the previous steps, you created a preliminary MA plot. MA plots are a widely used way to visualize genomic data. As you experienced above, these plots are a specific type of scatterplot typically used for gene expression datasets. The M represents the difference between two conditions (fold-change), while the A represents the average intensity of the expression. Both values take on a \\(\\log_{2}\\) transformation. M is expressed as a log ratio or difference in the following form. M is almost always placed on the y-axis. \\[M = log_{2}(\\frac{condition 1}{condition 2}) = log_{2}(condition 1) - log_{2}(condition2)\\] A is more simple, taking the form of a transformed average. A is often called “log mean expression” and is almost always placed on the x-axis. \\[A = \\frac{1}{2} (log_{2}(condition 1) + log_{2}(condition 2))\\] In the next steps, we will go over how to create an MA plot using limma. First, we will need to supply the design matrix and contrast matrix. 7.1 The Design Matrix Load the design matrix. This indicates which samples correspond to which cell populations. We will learn more about design matrices in later chapters. # Load the experimental design matrix design &lt;- readRDS( system.file(&quot;RNAseq123/design.rds&quot;, package = &quot;Glimma&quot;)) design ## Basal LP ML laneL006 laneL008 ## 1 0 1 0 0 0 ## 2 0 0 1 0 0 ## 3 1 0 0 0 0 ## 4 1 0 0 1 0 ## 5 0 0 1 1 0 ## 6 0 1 0 1 0 ## 7 1 0 0 1 0 ## 8 0 0 1 0 1 ## 9 0 1 0 0 1 ## attr(,&quot;assign&quot;) ## [1] 1 1 1 2 2 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$group ## [1] &quot;contr.treatment&quot; ## ## attr(,&quot;contrasts&quot;)$lane ## [1] &quot;contr.treatment&quot; 7.2 The Contrast Matrix Load the contrast matrix. This indicates which cell populations we want to compare. contr.matrix &lt;- readRDS( system.file(&quot;RNAseq123/contr.matrix.rds&quot;, package = &quot;Glimma&quot;)) 7.3 Fitting the Data There are several more steps to normalize and fit the data before making an MA plot. Don’t worry! We will cover these steps in more detail later in the course. Briefly, the voom() function \\(\\log_{2}\\) transforms and normalizes the data. lmFit() fits a linear model for each gene to examine differential expression between the cell populations we want to compare. v &lt;- voom(dge, design) vfit &lt;- lmFit(v, design) vfit &lt;- contrasts.fit(vfit, contrasts = contr.matrix) 7.4 Creating an MA Plot A simple MA plot can be produced with the plotMA() function. Other packages for exploring differential gene expression in R, such as DESeq2, also have functions to create MA plots. plotMA(vfit) 7.5 Interactive MA Plots glimmaMA() from the Glimma package creates interactive MA plots. Again, don’t worry about the preparation steps - these will be covered in more detail later. eBayes() computes statistics by empirical Bayes moderation of the standard errors towards a global value. efit &lt;- eBayes(vfit) glimmaMA(efit, dge = dge) 7.6 Recap sessionInfo() ## R version 4.0.2 (2020-06-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] matrixStats_0.61.0 limma_3.46.0 Glimma_2.0.0 ## ## loaded via a namespace (and not attached): ## [1] MatrixGenerics_1.2.1 Biobase_2.50.0 ## [3] httr_1.4.2 edgeR_3.32.1 ## [5] jsonlite_1.7.1 bit64_4.0.5 ## [7] splines_4.0.2 highr_0.8 ## [9] BiocManager_1.30.10 stats4_4.0.2 ## [11] blob_1.2.1 GenomeInfoDbData_1.2.4 ## [13] yaml_2.2.1 pillar_1.4.6 ## [15] RSQLite_2.2.1 lattice_0.20-41 ## [17] glue_1.6.1 digest_0.6.25 ## [19] GenomicRanges_1.42.0 RColorBrewer_1.1-2 ## [21] XVector_0.30.0 colorspace_1.4-1 ## [23] htmltools_0.5.0 Matrix_1.2-18 ## [25] DESeq2_1.30.1 XML_3.99-0.5 ## [27] pkgconfig_2.0.3 genefilter_1.72.1 ## [29] bookdown_0.24 zlibbioc_1.36.0 ## [31] purrr_0.3.4 xtable_1.8-4 ## [33] scales_1.1.1 BiocParallel_1.24.1 ## [35] tibble_3.0.3 annotate_1.68.0 ## [37] generics_0.0.2 IRanges_2.24.1 ## [39] ggplot2_3.3.2 ellipsis_0.3.1 ## [41] SummarizedExperiment_1.20.0 BiocGenerics_0.36.1 ## [43] survival_3.1-12 magrittr_2.0.2 ## [45] crayon_1.3.4 memoise_1.1.0 ## [47] evaluate_0.14 tools_4.0.2 ## [49] lifecycle_1.0.0 stringr_1.4.0 ## [51] S4Vectors_0.28.1 munsell_0.5.0 ## [53] locfit_1.5-9.4 DelayedArray_0.16.3 ## [55] AnnotationDbi_1.52.0 compiler_4.0.2 ## [57] jquerylib_0.1.4 GenomeInfoDb_1.26.7 ## [59] rlang_0.4.10 grid_4.0.2 ## [61] RCurl_1.98-1.2 htmlwidgets_1.5.2 ## [63] bitops_1.0-7 rmarkdown_2.10 ## [65] gtable_0.3.0 DBI_1.1.0 ## [67] R6_2.4.1 knitr_1.33 ## [69] dplyr_1.0.2 bit_4.0.4 ## [71] stringi_1.5.3 parallel_4.0.2 ## [73] Rcpp_1.0.8 vctrs_0.3.4 ## [75] geneplotter_1.68.0 tidyselect_1.1.0 ## [77] xfun_0.26 "],["summarizedexperiment.html", "Chapter 8 SummarizedExperiment 8.1 Recap", " Chapter 8 SummarizedExperiment 8.1 Recap sessionInfo() ## R version 4.0.2 (2020-06-22) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.3 LTS ## ## Matrix products: default ## BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] compiler_4.0.2 magrittr_2.0.2 bookdown_0.24 htmltools_0.5.0 ## [5] tools_4.0.2 yaml_2.2.1 jquerylib_0.1.4 stringi_1.5.3 ## [9] rmarkdown_2.10 knitr_1.33 stringr_1.4.0 digest_0.6.25 ## [13] xfun_0.26 rlang_0.4.10 evaluate_0.14 "],["help.html", "A Help", " A Help We welcome any and all questions at our Discourse Channel. If you have feedback on the activity (Found a typo? Have a suggestion or idea?) please submit an issue on our GitHub repository. You will need to make a GitHub account if you haven’t done so yet. "],["give-us-feedback.html", "B Give Us Feedback", " B Give Us Feedback Thank you for your interest in this book! There are a few ways you can suggest improvements: If you have a GitHub account, you can raise an issue in our repository. Submit a pull request! Click the pencil icon on any page (top left) to view the source .Rmd for the page and suggest changes. "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor Ava Hoffman Content Idea Contributor Kasper Hansen |Production|| |Content Publisher|Ira Gooding| |Technical|| |Template Publishing Engineers|Candace Savonen, Carrie Wright, Ava Hoffman| |Publishing Maintenance Engineer|Candace Savonen| |Technical Publishing Stylists|Carrie Wright, Candace Savonen| |Package Developers (ottrpal)|John Muschelli, Candace Savonen, Carrie Wright| |Funding|| |Funder| National Human Genome Research Institute (NHGRI) | |Funding Staff| Fallon Bachman, Jennifer Vessio, Emily Voeglein|   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.3 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2022-03-25 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.3) ## bookdown 0.24 2022-02-15 [1] Github (rstudio/bookdown@88bc4ea) ## callr 3.4.4 2020-09-07 [1] RSPM (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] RSPM (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [1] RSPM (R 4.0.3) ## fansi 0.4.1 2020-01-08 [1] RSPM (R 4.0.0) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] RSPM (R 4.0.1) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## knitr 1.33 2022-02-15 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.2) ## magrittr 2.0.2 2022-01-26 [1] CRAN (R 4.0.2) ## memoise 1.1.0 2017-04-21 [1] RSPM (R 4.0.0) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.3.4 2020-08-11 [1] RSPM (R 4.0.2) ## purrr 0.3.4 2020-04-17 [1] RSPM (R 4.0.3) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## rlang 0.4.10 2022-02-15 [1] Github (r-lib/rlang@f0c9be5) ## rmarkdown 2.10 2022-02-15 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2022-02-15 [1] Github (R-lib/testthat@e99155a) ## usethis 2.1.5.9000 2022-02-15 [1] Github (r-lib/usethis@57b109a) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2022-02-15 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
