[["index.html", "Statistics for Genomics: Differential Expression About this Book Skills Level GDSCN Collection", " Statistics for Genomics: Differential Expression January 31, 2025 About this Book This book is intended to introduce concepts in differential expression. Skills Level Genetics Programming skills GDSCN Collection This exercise is part of a collection of teaching resources developed through the Genomic Data Science Community Network (GDSCN). GDSCN works towards a vision where researchers, educators, and students from diverse backgrounds are able to fully participate in genomic data science research. Learn more about GDSCN by visiting https://www.gdscn.org/home or reading the article in Genome Research. Please check out our full collection of AnVIL and related resources: https://hutchdatascience.org/AnVIL_Collection/ "],["overview-and-learning-objectives.html", "Chapter 1 Overview and Learning Objectives 1.1 Activity Context 1.2 Learning Objectives", " Chapter 1 Overview and Learning Objectives 1.1 Activity Context Course Audience Graduate Students in Biological Sciences or related fields Course Prerequisites Layman understanding of genetics (understanding of DNA, genes, trait inheritance) Some previous exposure to the central dogma of molecular biology Class Type Lab Computer-based Class Size 1-50 Lesson Duration Assessment Type 1.2 Learning Objectives Learning objectives for this activity come from the Genetics Core Competencies: Gather and evaluate experimental evidence, including qualitative and quantitative data Generate and interpret graphs displaying experimental results Critique large data sets and use bioinformatics to assess genetics data Tap into the interdisciplinary nature of science "],["getting-set-up.html", "Chapter 2 Getting Set Up 2.1 Introduction 2.2 Create a Google Account 2.3 Sign in to Terra 2.4 Share your ID", " Chapter 2 Getting Set Up 2.1 Introduction This chapter explains how to get set up to do your analyses on AnVIL. All activities will be run using RStudio, so if you choose, you can use a different RStudio interface (such as RStudio Cloud or locally installed RStudio). The Analysis, Visualization, and Informatics Lab-space (AnVIL) is a scalable and interoperable computing resource for the genomics scientific community. AnVIL enables researchers to analyze high-value open and controlled access genomic datasets with popular analysis tools in a secure cloud computing environment. AnVIL also serves as a data commons. It runs on the Google Cloud Platform (GCP) and is sponsored by NHGRI. In addition to Docker-based analysis workflows, AnVIL supports popular interactive analysis tools such as Jupyter notebooks, Bioconductor, RStudio, and Galaxy. By operating in the cloud, AnVIL users can scale analyses from a single computer to thousands and securely share data, workflows, and reproducible results with collaborators and colleagues. 2.2 Create a Google Account AnVIL uses Terra to run analyses. Terra operates on Google Cloud Platform, so you’ll need a Google account to make sure your instructor can keep track of any computing costs you accrue. If you do not already have a Google account that you would like to use for accessing Terra, create one now. Otherwise, please use a Gmail account you have already set up. If you would like to create a Google account that is associated with your non-Gmail, institutional email address, follow these instructions. 2.3 Sign in to Terra You need to sign into Terra with your Google account to allow your instructor to add you to projects and/or Workspaces associated with your specific class. This is the only way you can launch applications and perform computations on AnVIL. Launch Terra, and you should be prompted to sign in with your Google account. You can always access Terra by going to anvil.terra.bio, or by clicking the link on the AnVIL home page. 2.4 Share your ID It is very important that you share the Google account you used above with your instructor! Otherwise, they cannot add you to class projects or Workspaces. "],["workspace.html", "Chapter 3 Creating a Workspace", " Chapter 3 Creating a Workspace Now that you have an account that works with AnVIL, you are ready to get started! In this chapter, we will learn about Workspaces, the fundamental work units inside AnVIL. Once you have created a Workspace, you can launch many tools and explore datasets. We will use a Workspace to launch RStudio in the next chapter. On AnVIL, you use Workspaces to configure and run analyses and share results. Workspaces support interactive analysis with RStudio, Jupyter notebooks, Bioconductor and Galaxy. Workspaces can also save the output generated by running an analysis with a Workspace’s associated “cloud environment.” Check out https://anvilproject.org to learn more about everything you can do within a Workspace. Launch Terra on AnVIL In the drop-down menu on the left, navigate to “Workspaces”. Click the triple bar in the top left corner to access the menu. Click “Workspaces”. Click on the plus icon near the top of left of the page. Name your Workspace and select the Billing Project as indicated by your instructor. Do not change the Bucket Location or Authorization Domain. You can add a Description if you wish. Click “CREATE WORKSPACE”. The new Workspace should now show up under your Workspaces. "],["rstudio.html", "Chapter 4 Working in RStudio 4.1 Launch RStudio Cloud Environment 4.2 Tour RStudio 4.3 More Practice with iSEE 4.4 Pause RStudio 4.5 Delete RStudio Cloud Environment 4.6 Video Guide", " Chapter 4 Working in RStudio Now that you have created a Workspace, you can create an RStudio cloud environment. This will allow you to interface with data and perform genomics-based analyses with add on packages from the Bioconductor community. 4.1 Launch RStudio Cloud Environment Click on the name of the Workspace you just created. You should be routed to a link that looks like: https://anvil.terra.bio/#workspaces/&lt;billing-project&gt;/&lt;workspace-name&gt;. On the top right, Click the gear icon to access your Cloud Environment options. You will see a list of costs because it costs a small amount of money to use cloud computing. Click “CUSTOMIZE”. Click on the first drop down menu to see what other software configurations are available. Scroll down and select RStudio from the Community-Maintained RStudio Environments section. NOTE: AnVIL is very versatile and can scale up to use very powerful cloud computers. It’s very important that you select the cloud computing environment described here to avoid runaway costs. Leave everything else as-is. To create your RStudio Cloud Environment, click on the “CREATE” button. Your Cloud Environment will be available in a few minutes after the cloud resources are provisioned and your software starts up. The upper right corner displays the status and should say “Creating” while resources are being provisioned. After a few minutes, you will see the status change to “Running”. Click on the “R” icon to launch RStudio. You should now see the RStudio interface with information about the version printed to the console. 4.2 Tour RStudio Next, we will be using RStudio and the package Glimma to create interactive plots. See this vignette for more information. The Bioconductor team has created a very useful package to programmatically interact with Terra and Google Cloud. Install the AnVIL package. It will make some steps easier as we go along. BiocManager::install(&quot;AnVIL&quot;) You can now quickly install precompiled binaries using the AnVIL package’s install() function. We will use it to install the Glimma package and the airway package. The airway package contains a SummarizedExperiment data class. This data describes an RNA-Seq experiment on four human airway smooth muscle cell lines treated with dexamethasone. We will learn more about SummarizedExperiments in following chapters. AnVIL::install(c(&quot;Glimma&quot;, &quot;airway&quot;)) Load the example data. library(airway) data(airway) The multidimensional scaling (MDS) plot is frequently used to explore differences in samples. When this data is MDS transformed, the first two dimensions explain the greatest variance between samples, and the amount of variance decreases monotonically with increasing dimension. The following code will launch a new window where you can interact with the MDS plot. Glimma::glimmaMDS(assay(airway), group = colData(airway)$dex) Change the colour_by setting to “groups” so you can easily distinguish between groups. In this data, the “group” is the treatment. You can download the interactive html file by clicking on “Save As”. You can also download plots and other files created directly in RStudio. To download the following plot, click on “Export” and save in your preferred format to the default directory. This saves the file in your cloud environment. limma::plotMDS(airway) You should see the plot in the “Files” pane. Select this file and click “More” &gt; “Export” Select “Download” to save the file to your local machine. 4.3 More Practice with iSEE iSEE is a Bioconductor package that provides an interactive Shiny-based graphical user interface for exploring data stored in SummarizedExperiment objects (Rue-Albrecht et al. 2018). Run the following. # Install iSEE AnVIL::install(&quot;iSEE&quot;) # Launch app on airway data iSEE::iSEE(airway) The Shiny app will allow you to explore genes and samples. 4.4 Pause RStudio The upper right corner reminds you that you are accruing cloud computing costs. You should minimize charges when you are not performing an analysis. You can do this by clicking on “Stop cloud environment”. This will release the CPU and memory resources for other people to use. Note that your work will be saved in the environment and continue to accrue a very small cost. Your instructor can delete these environments to stop costs accruing, so it’s a good idea to save code or output somewhere else, such as GitHub or your local machine. 4.5 Delete RStudio Cloud Environment Stopping your cloud environment only pauses your work. When you are ready to delete the cloud environment, click on the gear icon in the upper right corner to “Update cloud environment”. Click on “Delete Environment Options”. If you are certain that you do not need the data and configuration on your disk, you should select “Delete everything, including persistent disk”. Select “DELETE”. 4.6 Video Guide In addition to the steps above, you can review this video guide on how to launch RStudio on AnVIL. The slides for this tutorial are are located here. sessionInfo() ## R version 4.1.3 (2022-03-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] knitr_1.33 magrittr_2.0.3 hms_1.1.1 R6_2.5.1 ## [5] rlang_1.0.2 fastmap_1.1.0 fansi_1.0.3 highr_0.9 ## [9] httr_1.4.2 stringr_1.4.0 tools_4.1.3 xfun_0.26 ## [13] png_0.1-7 utf8_1.2.2 cli_3.2.0 jquerylib_0.1.4 ## [17] htmltools_0.5.2 ellipsis_0.3.2 ottrpal_1.0.1 yaml_2.3.5 ## [21] digest_0.6.29 tibble_3.1.6 lifecycle_1.0.1 crayon_1.5.1 ## [25] bookdown_0.24 tzdb_0.3.0 readr_2.1.2 sass_0.4.1 ## [29] vctrs_0.4.1 fs_1.5.2 curl_4.3.2 glue_1.6.2 ## [33] evaluate_0.15 rmarkdown_2.10 stringi_1.7.6 pillar_1.7.0 ## [37] compiler_4.1.3 bslib_0.3.1 jsonlite_1.8.0 pkgconfig_2.0.3 References "],["summarizedexperiment.html", "Chapter 5 The SummarizedExperiment class 5.1 Overview 5.2 Exploring SummarizedExperiment 5.3 Subsetting SummarizedExperiment 5.4 Recap", " Chapter 5 The SummarizedExperiment class 5.1 Overview One of the main strengths of using Bioconductor for bioinformatics is their data infrastructure. These data classes are built with genomics data in mind. This makes data compatible with different packages and/or methods. It also makes data easier to manipulate. The SummarizedExperiment class is used to store rectangular matrices of experimental results, which are commonly produced by sequencing and microarray experiments. Each SummarizedExperiment stores observations of one or more samples, along with additional meta-data describing both the observations (features) and samples (phenotypes). A key aspect of the SummarizedExperiment class is the coordination of the meta-data and assays when subsetting. For example, if you want to exclude a given sample you can do for both the meta-data and assay in one operation, which ensures the meta-data and observed data will remain in sync. Improperly accounting for meta and observational data has resulted in a number of incorrect results and retractions so this is a very desirable property. SummarizedExperiment is a matrix-like container where rows represent features of interest (e.g. genes, transcripts, exons, etc.) and columns represent samples. The objects contain one or more assays, each represented by a matrix-like object of numeric or other mode. The rows of a SummarizedExperiment object represent features of interest. Information about these features is stored in a DataFrame object, accessible using the function rowData(). Each row of the DataFrame provides information on the feature in the corresponding row of the SummarizedExperiment object. Columns of the DataFrame represent different attributes of the features of interest, e.g., gene or transcript IDs, etc. The above information comes directly from the vignette for SummarizedExperiment. Please check out their page for more information. 5.2 Exploring SummarizedExperiment First, we will load the necessary packages. # Install and load airway # AnVIL::install(c(&quot;airway&quot;)) library(airway) Load the gene expression data. The “airway” data is from an RNA-Seq experiment on four human airway smooth muscle cell lines treated with dexamethasone. You can learn more about the experiment in Himes (2014). # Load the gene expression data data(airway) assay() provides a matrix-like or list of matrix-like objects of identical dimension. rows: genes, genomic coordinates, etc. columns: samples, cells, etc. assay_data &lt;- assay(airway) head(assay_data) ## SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 ## ENSG00000000003 679 448 873 408 1138 ## ENSG00000000005 0 0 0 0 0 ## ENSG00000000419 467 515 621 365 587 ## ENSG00000000457 260 211 263 164 245 ## ENSG00000000460 60 55 40 35 78 ## ENSG00000000938 0 0 2 0 1 ## SRR1039517 SRR1039520 SRR1039521 ## ENSG00000000003 1047 770 572 ## ENSG00000000005 0 0 0 ## ENSG00000000419 799 417 508 ## ENSG00000000457 331 233 229 ## ENSG00000000460 63 76 60 ## ENSG00000000938 0 0 0 colData() provides annotations on each column, as a DataFrame. In other words, it provides descriptions of each sample. colData(airway) ## DataFrame with 8 rows and 9 columns ## SampleName cell dex albut Run avgLength ## &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;integer&gt; ## SRR1039508 GSM1275862 N61311 untrt untrt SRR1039508 126 ## SRR1039509 GSM1275863 N61311 trt untrt SRR1039509 126 ## SRR1039512 GSM1275866 N052611 untrt untrt SRR1039512 126 ## SRR1039513 GSM1275867 N052611 trt untrt SRR1039513 87 ## SRR1039516 GSM1275870 N080611 untrt untrt SRR1039516 120 ## SRR1039517 GSM1275871 N080611 trt untrt SRR1039517 126 ## SRR1039520 GSM1275874 N061011 untrt untrt SRR1039520 101 ## SRR1039521 GSM1275875 N061011 trt untrt SRR1039521 98 ## Experiment Sample BioSample ## &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; ## SRR1039508 SRX384345 SRS508568 SAMN02422669 ## SRR1039509 SRX384346 SRS508567 SAMN02422675 ## SRR1039512 SRX384349 SRS508571 SAMN02422678 ## SRR1039513 SRX384350 SRS508572 SAMN02422670 ## SRR1039516 SRX384353 SRS508575 SAMN02422682 ## SRR1039517 SRX384354 SRS508576 SAMN02422673 ## SRR1039520 SRX384357 SRS508579 SAMN02422683 ## SRR1039521 SRX384358 SRS508580 SAMN02422677 rowData() and / or rowRanges() provide annotations on each row. rowRanges(): coordinates of gene / exons in transcripts / etc. rowData(): P-values and log-fold change of each gene after differential expression analysis. rowRanges(airway) ## GRangesList object of length 64102: ## $ENSG00000000003 ## GRanges object with 17 ranges and 2 metadata columns: ## seqnames ranges strand | exon_id exon_name ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt; ## [1] X 99883667-99884983 - | 667145 ENSE00001459322 ## [2] X 99885756-99885863 - | 667146 ENSE00000868868 ## [3] X 99887482-99887565 - | 667147 ENSE00000401072 ## [4] X 99887538-99887565 - | 667148 ENSE00001849132 ## [5] X 99888402-99888536 - | 667149 ENSE00003554016 ## ... ... ... ... . ... ... ## [13] X 99890555-99890743 - | 667156 ENSE00003512331 ## [14] X 99891188-99891686 - | 667158 ENSE00001886883 ## [15] X 99891605-99891803 - | 667159 ENSE00001855382 ## [16] X 99891790-99892101 - | 667160 ENSE00001863395 ## [17] X 99894942-99894988 - | 667161 ENSE00001828996 ## ------- ## seqinfo: 722 sequences (1 circular) from an unspecified genome ## ## ... ## &lt;64101 more elements&gt; metadata(): List of unstructured metadata describing the overall content of the object. metadata(airway) ## [[1]] ## Experiment data ## Experimenter name: Himes BE ## Laboratory: NA ## Contact information: ## Title: RNA-Seq transcriptome profiling identifies CRISPLD2 as a glucocorticoid responsive gene that modulates cytokine function in airway smooth muscle cells. ## URL: http://www.ncbi.nlm.nih.gov/pubmed/24926665 ## PMIDs: 24926665 ## ## Abstract: A 226 word abstract is available. Use &#39;abstract&#39; method. Please see this vignette for more information. 5.3 Subsetting SummarizedExperiment Often, you’ll find you want to subset your expression/count data. You can do this by selecting the samples (columns) or features/genes (rows) you want to keep. # Collect the counts and sample data raw_counts &lt;- assay(airway) sample_data &lt;- colData(airway) # Select samples 1 and 2 samples_1_2 &lt;- raw_counts[, 1:2] head(samples_1_2) ## SRR1039508 SRR1039509 ## ENSG00000000003 679 448 ## ENSG00000000005 0 0 ## ENSG00000000419 467 515 ## ENSG00000000457 260 211 ## ENSG00000000460 60 55 ## ENSG00000000938 0 0 # Select untreated samples untrt_samples &lt;- raw_counts[, sample_data$dex == &quot;untrt&quot;] head(untrt_samples) ## SRR1039508 SRR1039512 SRR1039516 SRR1039520 ## ENSG00000000003 679 873 1138 770 ## ENSG00000000005 0 0 0 0 ## ENSG00000000419 467 621 587 417 ## ENSG00000000457 260 263 245 233 ## ENSG00000000460 60 40 78 76 ## ENSG00000000938 0 2 1 0 # Select features where mean expression &gt; 0 across samples nonzero_features &lt;- raw_counts[rowMeans(raw_counts) &gt; 0, ] head(nonzero_features) ## SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 ## ENSG00000000003 679 448 873 408 1138 ## ENSG00000000419 467 515 621 365 587 ## ENSG00000000457 260 211 263 164 245 ## ENSG00000000460 60 55 40 35 78 ## ENSG00000000938 0 0 2 0 1 ## ENSG00000000971 3251 3679 6177 4252 6721 ## SRR1039517 SRR1039520 SRR1039521 ## ENSG00000000003 1047 770 572 ## ENSG00000000419 799 417 508 ## ENSG00000000457 331 233 229 ## ENSG00000000460 63 76 60 ## ENSG00000000938 0 0 0 ## ENSG00000000971 11027 5176 7995 5.4 Recap # Learn more about the class ?SummarizedExperiment::`SummarizedExperiment-class` # Browse vignettes and more ??SummarizedExperiment sessionInfo() ## R version 4.1.3 (2022-03-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] airway_1.14.0 SummarizedExperiment_1.24.0 ## [3] Biobase_2.54.0 GenomicRanges_1.46.1 ## [5] GenomeInfoDb_1.30.1 IRanges_2.28.0 ## [7] S4Vectors_0.32.4 BiocGenerics_0.40.0 ## [9] MatrixGenerics_1.6.0 matrixStats_0.61.0 ## ## loaded via a namespace (and not attached): ## [1] XVector_0.34.0 bslib_0.3.1 compiler_4.1.3 ## [4] pillar_1.7.0 jquerylib_0.1.4 highr_0.9 ## [7] zlibbioc_1.40.0 bitops_1.0-7 tools_4.1.3 ## [10] digest_0.6.29 lattice_0.20-45 jsonlite_1.8.0 ## [13] evaluate_0.15 lifecycle_1.0.1 tibble_3.1.6 ## [16] pkgconfig_2.0.3 png_0.1-7 rlang_1.0.2 ## [19] Matrix_1.4-0 DelayedArray_0.20.0 cli_3.2.0 ## [22] curl_4.3.2 yaml_2.3.5 xfun_0.26 ## [25] fastmap_1.1.0 GenomeInfoDbData_1.2.7 stringr_1.4.0 ## [28] httr_1.4.2 knitr_1.33 fs_1.5.2 ## [31] vctrs_0.4.1 sass_0.4.1 hms_1.1.1 ## [34] grid_4.1.3 glue_1.6.2 R6_2.5.1 ## [37] fansi_1.0.3 ottrpal_1.0.1 rmarkdown_2.10 ## [40] bookdown_0.24 readr_2.1.2 tzdb_0.3.0 ## [43] magrittr_2.0.3 ellipsis_0.3.2 htmltools_0.5.2 ## [46] utf8_1.2.2 stringi_1.7.6 RCurl_1.98-1.6 ## [49] crayon_1.5.1 References "],["transformation-fold-change-ma-plots.html", "Chapter 6 Transformation, Fold-change, &amp; MA Plots 6.1 Gene Expression Data 6.2 Plotting Raw Counts 6.3 Transforming (\\(\\log_{2}\\)) 6.4 Using Fold-Change to Create an MA Plot 6.5 Future Directions 6.6 Recap", " Chapter 6 Transformation, Fold-change, &amp; MA Plots The following excerpt comes from Ritchie et al. (2015) : Measuring expression in multiple RNA samples produces columns of correlated expression values, which are highly correlated because they are measured on the same set of genes or genomic features. It has long been established in the biomedical literature that the level of agreement between correlated variables can be usefully examined by plotting differences versus means. In other words, gene expression data is full of correlations. We must think carefully about how we examine and plot gene expression data. In the next steps, we will: Examine how \\(\\log_{2}\\) transformations and fold-change improve data clarity Learn how to make MA plots on gene expression data Much of the following has been adopted from the Glimma vignette for limma and edgeR (Su et al. 2017). 6.1 Gene Expression Data First, we will load the necessary packages. # Install and load airway # AnVIL::install(c(&quot;airway&quot;)) library(airway) Load the gene expression data. We will be using data from an RNA-Seq experiment on four human airway smooth muscle cell lines treated with dexamethasone (Himes 2014). # Load the gene expression data data(airway) head(assay(airway),10) ## SRR1039508 SRR1039509 SRR1039512 SRR1039513 SRR1039516 ## ENSG00000000003 679 448 873 408 1138 ## ENSG00000000005 0 0 0 0 0 ## ENSG00000000419 467 515 621 365 587 ## ENSG00000000457 260 211 263 164 245 ## ENSG00000000460 60 55 40 35 78 ## ENSG00000000938 0 0 2 0 1 ## ENSG00000000971 3251 3679 6177 4252 6721 ## ENSG00000001036 1433 1062 1733 881 1424 ## ENSG00000001084 519 380 595 493 820 ## ENSG00000001167 394 236 464 175 658 ## SRR1039517 SRR1039520 SRR1039521 ## ENSG00000000003 1047 770 572 ## ENSG00000000005 0 0 0 ## ENSG00000000419 799 417 508 ## ENSG00000000457 331 233 229 ## ENSG00000000460 63 76 60 ## ENSG00000000938 0 0 0 ## ENSG00000000971 11027 5176 7995 ## ENSG00000001036 1439 1359 1109 ## ENSG00000001084 714 696 704 ## ENSG00000001167 584 360 269 In this data, each sample is in a column, while each gene is in a row. These raw counts range from very small to quite large numbers! 6.2 Plotting Raw Counts Let’s say we want to compare treated and untreated samples. We will first look at the sample data. # View metadata colData(airway) ## DataFrame with 8 rows and 9 columns ## SampleName cell dex albut Run avgLength ## &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;integer&gt; ## SRR1039508 GSM1275862 N61311 untrt untrt SRR1039508 126 ## SRR1039509 GSM1275863 N61311 trt untrt SRR1039509 126 ## SRR1039512 GSM1275866 N052611 untrt untrt SRR1039512 126 ## SRR1039513 GSM1275867 N052611 trt untrt SRR1039513 87 ## SRR1039516 GSM1275870 N080611 untrt untrt SRR1039516 120 ## SRR1039517 GSM1275871 N080611 trt untrt SRR1039517 126 ## SRR1039520 GSM1275874 N061011 untrt untrt SRR1039520 101 ## SRR1039521 GSM1275875 N061011 trt untrt SRR1039521 98 ## Experiment Sample BioSample ## &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; ## SRR1039508 SRX384345 SRS508568 SAMN02422669 ## SRR1039509 SRX384346 SRS508567 SAMN02422675 ## SRR1039512 SRX384349 SRS508571 SAMN02422678 ## SRR1039513 SRX384350 SRS508572 SAMN02422670 ## SRR1039516 SRX384353 SRS508575 SAMN02422682 ## SRR1039517 SRX384354 SRS508576 SAMN02422673 ## SRR1039520 SRX384357 SRS508579 SAMN02422683 ## SRR1039521 SRX384358 SRS508580 SAMN02422677 We will manually take the mean across treated and untreated samples. # Collect the counts and sample data raw_counts &lt;- assay(airway) sample_data &lt;- colData(airway) # Select untreated samples untrt_sample_means &lt;- rowMeans2(raw_counts[, sample_data$dex == &quot;untrt&quot;]) # Select treated samples trt_sample_means &lt;- rowMeans2(raw_counts[, sample_data$dex == &quot;trt&quot;]) Then we will plot the two groups. plot(untrt_sample_means, trt_sample_means) This is hard to interpret. Most of the genes are clustered in the bottom left corner. 6.3 Transforming (\\(\\log_{2}\\)) Using a \\(\\log_{2}\\) transformation makes it easier to examine all the genes together. # Plot with log2 transformation plot(log2(untrt_sample_means), log2(trt_sample_means)) 6.4 Using Fold-Change to Create an MA Plot As stated at the very start of this chapter, plotting differences versus means can be very helpful when many genes are correlated. It also makes interpretation easier when combined with a \\(\\log_{2}\\) transformation. In the next steps, you will create a preliminary MA plot. MA plots are a widely used way to visualize genomic data. The M represents the difference between two conditions (fold-change), while the A represents the average intensity of the expression. Both values take on a \\(\\log_{2}\\) transformation. M is expressed as a log ratio or difference in the following form. M is almost always placed on the y-axis. \\[M = log_{2}(\\frac{condition 1}{condition 2}) = log_{2}(condition 1) - log_{2}(condition2)\\] A is more simple, taking the form of a transformed average. A is often called “log mean expression” and is almost always placed on the x-axis. \\[A = \\frac{1}{2} (log_{2}(condition 1) + log_{2}(condition 2))\\] When untreated and treated expression are equal, fold-change is equal to zero. log2(10) - log2(10) ## [1] 0 When untreated expression is greater, fold-change is positive. log2(20) - log2(10) ## [1] 1 log2(100) - log2(1) ## [1] 6.643856 However when treated expression is greater, fold-change is negative. log2(10) - log2(20) ## [1] -1 log2(1) - log2(100) ## [1] -6.643856 Calculate log2 fold-change and mean expression for the data. log2_fold_change &lt;- log2(untrt_sample_means) - log2(trt_sample_means) mean_expression &lt;- (log2(untrt_sample_means) + log2(trt_sample_means)) / 2 Plot the values above, with mean expression on the x-axis and fold-change on the y-axis. plot(mean_expression, log2_fold_change) Since there are many data points, it’s a good idea to customize your plot. The ggplot2 package can also provide greater flexibility with plotting. library(scales) plot(mean_expression, log2_fold_change, col = alpha(&quot;black&quot;, 0.1), pch = 16, cex = 0.5) This gives us a very rough idea of how transformation and using fold-change can aid in interpretation of the data. In reality, we need to cover a few more steps before creating this kind of plot. 6.5 Future Directions A simple MA plot can be produced with the plotMA() function from the limma package. Other packages for exploring differential gene expression in R, such as DESeq2, also have functions to create MA plots. # Not run plotMA() glimmaMA() from the Glimma package creates interactive MA plots. # Not run glimmaMA() 6.6 Recap sessionInfo() ## R version 4.1.3 (2022-03-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] scales_1.2.1 airway_1.14.0 ## [3] SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [5] GenomicRanges_1.46.1 GenomeInfoDb_1.30.1 ## [7] IRanges_2.28.0 S4Vectors_0.32.4 ## [9] BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [11] matrixStats_0.61.0 ## ## loaded via a namespace (and not attached): ## [1] highr_0.9 bslib_0.3.1 compiler_4.1.3 ## [4] jquerylib_0.1.4 XVector_0.34.0 bitops_1.0-7 ## [7] tools_4.1.3 zlibbioc_1.40.0 digest_0.6.29 ## [10] lifecycle_1.0.1 jsonlite_1.8.0 evaluate_0.15 ## [13] lattice_0.20-45 rlang_1.0.2 Matrix_1.4-0 ## [16] DelayedArray_0.20.0 cli_3.2.0 yaml_2.3.5 ## [19] xfun_0.26 fastmap_1.1.0 GenomeInfoDbData_1.2.7 ## [22] stringr_1.4.0 knitr_1.33 sass_0.4.1 ## [25] grid_4.1.3 R6_2.5.1 rmarkdown_2.10 ## [28] bookdown_0.24 farver_2.1.0 magrittr_2.0.3 ## [31] htmltools_0.5.2 colorspace_2.0-3 stringi_1.7.6 ## [34] munsell_0.5.0 RCurl_1.98-1.6 References "],["design-matrices.html", "Chapter 7 Design Matrices 7.1 Overview 7.2 Types of Models 7.3 Making a Design Matrix 7.4 More Complex Designs 7.5 Design Matrix in Practice 7.6 Recap", " Chapter 7 Design Matrices 7.1 Overview When performing differential expression analysis on genomic data (such as RNA-seq experiments), scientists usually use linear models to determine the direction (did expression go up or down?) and magnitude (by how much?) of the change in expression. These scientists are interested in understanding the relationship between gene expression (the “response” variable”) and variables that affect expression, such as a treatment or cell type (“explanatory variable(s)”). Design matrices are fundamental concepts in mathematics, statistics, and other domains, but their application to genomic data can introduce some complexity. See this Bioconductor vignette for an excellent, in-depth look at design matrices. 7.2 Types of Models The type of explanatory variables in our experiment will determine what our model looks like. 7.2.1 Regression: Continuous Variables Continuous variables, or covariates, are numeric. This means that we could create a scatterplot comparing the covariate and expression. We could then imagine drawing a best fit line through those points to create our model. Law et al. (2020) state: [Covariates] can be the age or weight of an individual, or other molecular or cellular phenotypes on a sample… For covariates, it is generally of interest to know the rate of change between the response and the covariate, such as “how much does the expression of a particular gene increase/decrease per unit increase in age?”. We can use a straight line to model, or describe, this relationship, which takes the form of \\[Expression = \\beta_{0} + \\beta_{1}age\\] where the line is defined by \\(\\beta_{0}\\) the y-intercept and \\(\\beta_{1}\\) the slope. In this model, the age covariate takes continuous, numerical values such as 0.8, 1.3, 2.0, 5.6, and so on. These \\(\\beta\\) values are known as parameters and are important for determining the impact of explanatory variables on expression. 7.2.2 Means: Categorical Variables Categorical variables are discrete variables, or factors. We can think of these variables as “bins” that our samples fall into. Law et al. (2020) state: [Factors] are often separated into those that are of a biological nature (e.g. disease status, genotype, treatment, cell-type) and those that are of a technical nature (e.g. experiment time, sample batch, handling technician, sequencing lane). Unique values within a factor are referred to as levels. For example, genotype as a factor may contain two levels, “wildtype” and “mutant”. Here, it is generally of interest to determine the expected or mean gene expression for each state or level of the factor. The relationship between gene expression and the factor can be described, or modeled, in the form of \\[Expression = \\beta_{1}wildtype + \\beta_{2}mutant\\] where \\(\\beta_{1}\\) represents the mean gene expression for wildtype, and \\(\\beta_{2}\\) represents the mean gene expression for mutant. The “genotype” factor in this model is not numeric like “age” above, so the calculations work a bit differently. For any given sample, it can be either wildtype or mutant but not both. So, the values “wildtype” and “mutant” can only be zero (no) or one (yes). When a sample is mutant, “wildtype” = 0, and \\(\\beta_{1}\\) drops out of the equation. Likewise, when a sample is wildtype, “mutant” = 0, and \\(\\beta_{2}\\) drops out of the equation. This kind of model is called a means model. 7.2.3 Mean-Reference: Categorical Variables You can also design categorical models with a “reference” value for comparison. Law et al. (2020) state: An alternative parameterisation of the means model directly calculates the gene expression difference between mutant and wildtype. It does so by using one of the levels as a reference. Such a model is parameterised for the mean expression of the reference level (e.g. wildtype), and the rest of the levels are parameterised relative to the reference (e.g. the difference between mutant and wildtype). The relationship between gene expression and genotype is modeled in the form of \\[Expression = \\beta_{1} + \\beta_{2}mutant\\] where \\(\\beta_{1}\\) represents the mean gene expression for wildtype, and \\(\\beta_{2}\\) is the difference between means of mutant and wildtype This kind of model can be really useful if you are interested in the difference between groups rather than the estimated parameters for the groups themselves. This kind of model is called a mean-reference model. 7.3 Making a Design Matrix Law et al. (2020) use the following data to demonstrate how you might build a design matrix. This is a very simple example - in reality, we’d have many more genes being expressed. df ## expression mouse age group ## 1 2.38 MOUSE1 1 HEALTHY ## 2 2.85 MOUSE2 2 HEALTHY ## 3 3.60 MOUSE3 3 HEALTHY ## 4 4.06 MOUSE4 4 SICK ## 5 4.61 MOUSE5 5 SICK ## 6 5.04 MOUSE6 6 SICK 7.3.1 Regression: Continuous Variables Use the model.matrix() function to create the design matrix with the continuous variable “age”. model.matrix( ~ df$age) ## (Intercept) df$age ## 1 1 1 ## 2 1 2 ## 3 1 3 ## 4 1 4 ## 5 1 5 ## 6 1 6 ## attr(,&quot;assign&quot;) ## [1] 0 1 You can remove the intercept by adding zero to the design matrix. This forces the y-intercept to be zero. You could also use a different number here. model.matrix( ~ 0 + df$age) ## df$age ## 1 1 ## 2 2 ## 3 3 ## 4 4 ## 5 5 ## 6 6 ## attr(,&quot;assign&quot;) ## [1] 1 7.3.2 Means: Categorical Variables Use the model.matrix() function to create the design matrix with the factor “group”. To create a means model, you should include a zero in the model. model.matrix( ~ 0 + df$group) ## df$groupHEALTHY df$groupSICK ## 1 1 0 ## 2 1 0 ## 3 1 0 ## 4 0 1 ## 5 0 1 ## 6 0 1 ## attr(,&quot;assign&quot;) ## [1] 1 1 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$`df$group` ## [1] &quot;contr.treatment&quot; Notice that you only see zeros and ones for the two groups: df$groupHEALTHY and df$groupSICK. 7.3.3 Mean-Reference: Categorical Variables Simply remove the zero to use a mean-reference model. model.matrix( ~ df$group) ## (Intercept) df$groupSICK ## 1 1 0 ## 2 1 0 ## 3 1 0 ## 4 1 1 ## 5 1 1 ## 6 1 1 ## attr(,&quot;assign&quot;) ## [1] 0 1 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$`df$group` ## [1] &quot;contr.treatment&quot; Notice how there is now an intercept. Remember that the parameter will now represent the difference between the groups instead of the second group mean. 7.4 More Complex Designs model.matrix() can easily handle more complex experimental designs. df2 ## expression mouse group type ## 1 2.38 MOUSE1 HEALTHY WILDTYPE ## 2 2.85 MOUSE2 HEALTHY WILDTYPE ## 3 3.60 MOUSE3 HEALTHY WILDTYPE ## 4 4.06 MOUSE4 SICK WILDTYPE ## 5 4.61 MOUSE5 SICK WILDTYPE ## 6 5.04 MOUSE6 SICK WILDTYPE ## 7 6.48 MOUSE7 HEALTHY MUTANT ## 8 6.70 MOUSE8 HEALTHY MUTANT ## 9 8.01 MOUSE9 HEALTHY MUTANT ## 10 11.99 MOUSE10 SICK MUTANT ## 11 12.81 MOUSE11 SICK MUTANT ## 12 14.73 MOUSE12 SICK MUTANT The following will create a design matrix for “group” and “type”. model.matrix( ~ df2$group + df2$type) ## (Intercept) df2$groupSICK df2$typeWILDTYPE ## 1 1 0 1 ## 2 1 0 1 ## 3 1 0 1 ## 4 1 1 1 ## 5 1 1 1 ## 6 1 1 1 ## 7 1 0 0 ## 8 1 0 0 ## 9 1 0 0 ## 10 1 1 0 ## 11 1 1 0 ## 12 1 1 0 ## attr(,&quot;assign&quot;) ## [1] 0 1 2 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$`df2$group` ## [1] &quot;contr.treatment&quot; ## ## attr(,&quot;contrasts&quot;)$`df2$type` ## [1] &quot;contr.treatment&quot; Use the “*” to create a design matrix for the “group” and “type” as well as their interaction. model.matrix( ~ df2$group + df2$type) ## (Intercept) df2$groupSICK df2$typeWILDTYPE ## 1 1 0 1 ## 2 1 0 1 ## 3 1 0 1 ## 4 1 1 1 ## 5 1 1 1 ## 6 1 1 1 ## 7 1 0 0 ## 8 1 0 0 ## 9 1 0 0 ## 10 1 1 0 ## 11 1 1 0 ## 12 1 1 0 ## attr(,&quot;assign&quot;) ## [1] 0 1 2 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$`df2$group` ## [1] &quot;contr.treatment&quot; ## ## attr(,&quot;contrasts&quot;)$`df2$type` ## [1] &quot;contr.treatment&quot; 7.5 Design Matrix in Practice Let’s practice on a genomics dataset. Load the airway dataset. You might need to install it. Recall that the “airway” data is from an RNA-Seq experiment on four human airway smooth muscle cell lines treated with dexamethasone. You can learn more about the experiment in Himes (2014). # AnVIL::install(&quot;airway&quot;) library(airway) data(airway) In the SummarizedExperiment chapter, we learned that colData() provides descriptions of each sample. colData(airway) ## DataFrame with 8 rows and 9 columns ## SampleName cell dex albut Run avgLength ## &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;integer&gt; ## SRR1039508 GSM1275862 N61311 untrt untrt SRR1039508 126 ## SRR1039509 GSM1275863 N61311 trt untrt SRR1039509 126 ## SRR1039512 GSM1275866 N052611 untrt untrt SRR1039512 126 ## SRR1039513 GSM1275867 N052611 trt untrt SRR1039513 87 ## SRR1039516 GSM1275870 N080611 untrt untrt SRR1039516 120 ## SRR1039517 GSM1275871 N080611 trt untrt SRR1039517 126 ## SRR1039520 GSM1275874 N061011 untrt untrt SRR1039520 101 ## SRR1039521 GSM1275875 N061011 trt untrt SRR1039521 98 ## Experiment Sample BioSample ## &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; ## SRR1039508 SRX384345 SRS508568 SAMN02422669 ## SRR1039509 SRX384346 SRS508567 SAMN02422675 ## SRR1039512 SRX384349 SRS508571 SAMN02422678 ## SRR1039513 SRX384350 SRS508572 SAMN02422670 ## SRR1039516 SRX384353 SRS508575 SAMN02422682 ## SRR1039517 SRX384354 SRS508576 SAMN02422673 ## SRR1039520 SRX384357 SRS508579 SAMN02422683 ## SRR1039521 SRX384358 SRS508580 SAMN02422677 Notice above how the dex column indicates a trt or untrt condition. The following code will create a design matrix based on dex treatment. Since this is a categorical variable, we need to use a means or mean-reference model. First, create a means model using the following code. sample_data &lt;- colData(airway) model.matrix( ~ 0 + sample_data$dex) ## sample_data$dextrt sample_data$dexuntrt ## 1 0 1 ## 2 1 0 ## 3 0 1 ## 4 1 0 ## 5 0 1 ## 6 1 0 ## 7 0 1 ## 8 1 0 ## attr(,&quot;assign&quot;) ## [1] 1 1 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$`sample_data$dex` ## [1] &quot;contr.treatment&quot; Now try creating a mean-reference model using the following. model.matrix( ~ sample_data$dex) ## (Intercept) sample_data$dexuntrt ## 1 1 1 ## 2 1 0 ## 3 1 1 ## 4 1 0 ## 5 1 1 ## 6 1 0 ## 7 1 1 ## 8 1 0 ## attr(,&quot;assign&quot;) ## [1] 0 1 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$`sample_data$dex` ## [1] &quot;contr.treatment&quot; QUESTIONS: What is the difference between the two design matrices you created above? Does it matter which one you use? Why or why not? 7.6 Recap sessionInfo() ## R version 4.1.3 (2022-03-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] airway_1.14.0 SummarizedExperiment_1.24.0 ## [3] Biobase_2.54.0 GenomicRanges_1.46.1 ## [5] GenomeInfoDb_1.30.1 IRanges_2.28.0 ## [7] S4Vectors_0.32.4 BiocGenerics_0.40.0 ## [9] MatrixGenerics_1.6.0 matrixStats_0.61.0 ## [11] ggplot2_3.3.5 ## ## loaded via a namespace (and not attached): ## [1] lattice_0.20-45 png_0.1-7 assertthat_0.2.1 ## [4] digest_0.6.29 utf8_1.2.2 R6_2.5.1 ## [7] evaluate_0.15 httr_1.4.2 highr_0.9 ## [10] pillar_1.7.0 zlibbioc_1.40.0 rlang_1.0.2 ## [13] curl_4.3.2 jquerylib_0.1.4 Matrix_1.4-0 ## [16] rmarkdown_2.10 labeling_0.4.2 splines_4.1.3 ## [19] readr_2.1.2 stringr_1.4.0 RCurl_1.98-1.6 ## [22] munsell_0.5.0 DelayedArray_0.20.0 compiler_4.1.3 ## [25] xfun_0.26 pkgconfig_2.0.3 mgcv_1.8-39 ## [28] htmltools_0.5.2 ottrpal_1.0.1 tidyselect_1.1.2 ## [31] tibble_3.1.6 GenomeInfoDbData_1.2.7 bookdown_0.24 ## [34] fansi_1.0.3 crayon_1.5.1 dplyr_1.0.8 ## [37] tzdb_0.3.0 withr_2.5.0 bitops_1.0-7 ## [40] grid_4.1.3 nlme_3.1-155 jsonlite_1.8.0 ## [43] gtable_0.3.0 lifecycle_1.0.1 DBI_1.1.2 ## [46] magrittr_2.0.3 scales_1.2.1 cli_3.2.0 ## [49] stringi_1.7.6 farver_2.1.0 XVector_0.34.0 ## [52] fs_1.5.2 bslib_0.3.1 ellipsis_0.3.2 ## [55] generics_0.1.2 vctrs_0.4.1 tools_4.1.3 ## [58] glue_1.6.2 purrr_0.3.4 hms_1.1.1 ## [61] fastmap_1.1.0 yaml_2.3.5 colorspace_2.0-3 ## [64] knitr_1.33 sass_0.4.1 References "],["simple-model-fitting.html", "Chapter 8 Simple Model Fitting 8.1 Overview 8.2 Load &amp; Prepare Data 8.3 Creating the Design Matrix 8.4 Testing with lmFit and eBayes 8.5 Interpreting topTable() Output 8.6 Recap", " Chapter 8 Simple Model Fitting 8.1 Overview Now that you are familiar with SummarizedExperiment and design matrices, you can apply what you learned to the airway dataset. Recall that the airway data is from an RNA-Seq experiment on four human airway smooth muscle cell lines treated with dexamethasone. You can learn more about the experiment in Himes (2014). 8.2 Load &amp; Prepare Data Load the airway dataset. You might need to install it. # AnVIL::install(&quot;airway&quot;) library(airway) data(airway) You should also save the assay data from airway. Remember that assay() extracts the gene counts. assay_data &lt;- assay(airway) 8.3 Creating the Design Matrix You should create a design matrix like you did in the previous chapter. Since the dexamethasone treatment is a categorical variable, you need to use a means or mean-reference model. Going forward, we will use a mean-reference model because we are interested in the difference attributable to the treatment. sample_data &lt;- colData(airway) design_matrix &lt;- model.matrix( ~ sample_data$dex) 8.4 Testing with lmFit and eBayes Now you start the exciting process of model fitting! You will need the limma package. # AnVIL::install(&quot;limma&quot;) library(limma) You want to transform the count data before proceeding with model fitting. The voom() function transforms count data to \\(\\log_{2}\\)-counts per million (logCPM), estimates the mean-variance relationship, and uses these values to compute appropriate observation-level weights. This is an important step that takes into account the mean-variance relationship in the data. In other words, it factors in that as gene counts (expression) becomes greater, so does the variance. voom() also corrects for differences in sequencing depth among samples (libraries). This can happen when one sample starts with more total RNA or the sequencer produces more data for one sample over another. You should also supply the design matrix. assay_data &lt;- voom(assay_data, design = design_matrix) Next, use the limma function lmFit(). This function fits multiple linear models by weighted or generalized least squares. A linear model is fitted to the expression data for each gene. As above, you should supply the design matrix. fit &lt;- lmFit(assay_data, design = design_matrix) The code above estimates coefficients, but it’s easier to interpret if you have log-odd or p-values. You can use eBayes() for this. The eBayes() function computes moderated t-statistics, moderated F-statistic, and log-odds of differential expression by empirical Bayes moderation of the standard errors, when this function is given the output of lmFit(). This allows us to rank genes in order of evidence for differential expression. Using empirical Bayes methods squeezes the gene-wise residual variances toward a common value (or towards a global trend). fit &lt;- eBayes(fit) Now that you have a fitted model and estimated statistics, you can look at individual genes. Because the fitted models are based on the design matrix we supplied, “top” genes will be based the difference between trt and untrt. Remember that these indicate whether or not cells received dexamethasone treatment. The function topTable() shows you the top-ranked genes given the model you supplied. topTable(fit) ## Removing intercept from test coefficients ## logFC AveExpr t P.Value adj.P.Val ## ENSG00000134686 -1.304196 6.837469 -22.28727 1.384466e-09 8.874707e-05 ## ENSG00000148175 -1.364975 8.854588 -18.96349 6.315648e-09 1.428428e-04 ## ENSG00000162614 -1.945885 7.636408 -17.51779 1.325278e-08 1.428428e-04 ## ENSG00000162616 -1.430717 5.903480 -17.27478 1.509630e-08 1.428428e-04 ## ENSG00000189221 -3.263290 5.949117 -16.91641 1.835153e-08 1.428428e-04 ## ENSG00000152583 -4.480843 4.165462 -17.88614 1.091355e-08 1.428428e-04 ## ENSG00000120129 -2.847874 6.643013 -16.56703 2.228368e-08 1.428428e-04 ## ENSG00000178695 2.589942 6.450283 16.57994 2.212289e-08 1.428428e-04 ## ENSG00000196517 2.289351 3.024889 17.85198 1.111011e-08 1.428428e-04 ## ENSG00000125148 -2.136635 7.022630 -15.98043 3.114408e-08 1.814907e-04 ## B ## ENSG00000134686 12.547426 ## ENSG00000148175 11.263744 ## ENSG00000162614 10.516600 ## ENSG00000162616 10.307478 ## ENSG00000189221 10.103458 ## ENSG00000152583 10.049829 ## ENSG00000120129 9.977213 ## ENSG00000178695 9.974713 ## ENSG00000196517 9.831402 ## ENSG00000125148 9.673848 8.5 Interpreting topTable() Output You now have the top genes affected by the treatment. Here’s how you can interpret the output. logFC: estimate of the log2-fold-change corresponding to the effect of the treatment. Negative values mean the second treatment, in this case untrt, has lower expression than the baseline, in this case trt. Take a look at the design matrix to confirm. AveExpr : average log2-expression for the gene over all samples. t: moderated t-statistic P.Value: raw p-value adj.P.Value: adjusted p-value using the Benjamini &amp; Hochberg method (by default) B: log-odds that the gene is differentially expressed QUESTIONS: The top three genes have a negative logFC. Which treatment (untrt or trt) had greater expression? eBayes() performs p-value adjustment automatically. Why is it essential that we perform p-value adjustment for gene expression data? 8.6 Recap sessionInfo() ## R version 4.1.3 (2022-03-10) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.5 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats4 stats graphics grDevices utils datasets methods ## [8] base ## ## other attached packages: ## [1] limma_3.50.3 airway_1.14.0 ## [3] SummarizedExperiment_1.24.0 Biobase_2.54.0 ## [5] GenomicRanges_1.46.1 GenomeInfoDb_1.30.1 ## [7] IRanges_2.28.0 S4Vectors_0.32.4 ## [9] BiocGenerics_0.40.0 MatrixGenerics_1.6.0 ## [11] matrixStats_0.61.0 ## ## loaded via a namespace (and not attached): ## [1] bslib_0.3.1 compiler_4.1.3 jquerylib_0.1.4 ## [4] XVector_0.34.0 bitops_1.0-7 tools_4.1.3 ## [7] zlibbioc_1.40.0 digest_0.6.29 jsonlite_1.8.0 ## [10] evaluate_0.15 lattice_0.20-45 rlang_1.0.2 ## [13] Matrix_1.4-0 DelayedArray_0.20.0 cli_3.2.0 ## [16] yaml_2.3.5 xfun_0.26 fastmap_1.1.0 ## [19] GenomeInfoDbData_1.2.7 stringr_1.4.0 knitr_1.33 ## [22] sass_0.4.1 grid_4.1.3 R6_2.5.1 ## [25] rmarkdown_2.10 bookdown_0.24 magrittr_2.0.3 ## [28] htmltools_0.5.2 stringi_1.7.6 RCurl_1.98-1.6 References "],["help.html", "A Help", " A Help We welcome any and all questions at our Discourse Channel. If you have feedback on the activity (Found a typo? Have a suggestion or idea?) please submit an issue on our GitHub repository. You will need to make a GitHub account if you haven’t done so yet. "],["give-us-feedback.html", "B Give Us Feedback", " B Give Us Feedback Thank you for your interest in this book! There are a few ways you can suggest improvements: If you have a GitHub account, you can raise an issue in our repository. Submit a pull request! Click the pencil icon on any page (top left) to view the source .Rmd for the page and suggest changes. "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor Ava Hoffman Content Idea Contributor Kasper Hansen Content Directors Kasper Hansen, Jeff Leek, Frederick Tan Production Content Publisher Ira Gooding Technical Template Publishing Engineers Candace Savonen, Carrie Wright, Ava Hoffman Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Candace Savonen Package Developers (ottrpal) John Muschelli, Candace Savonen, Carrie Wright Funding Funder National Human Genome Research Institute (NHGRI) Funding Staff Fallon Bachman, Jennifer Vessio, Emily Voeglein   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.1.3 (2022-03-10) ## os Ubuntu 20.04.5 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2025-01-31 ## pandoc 2.17.1.1 @ /usr/local/bin/ (via rmarkdown) ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date (UTC) lib source ## bookdown 0.24 2023-03-22 [1] Github (rstudio/bookdown@88bc4ea) ## bslib 0.3.1 2021-10-06 [1] RSPM (R 4.1.0) ## cachem 1.0.6 2021-08-19 [1] RSPM (R 4.1.0) ## callr 3.7.0 2021-04-20 [1] RSPM (R 4.1.0) ## cli 3.2.0 2022-02-14 [1] RSPM (R 4.1.0) ## crayon 1.5.1 2022-03-26 [1] RSPM (R 4.1.0) ## desc 1.4.1 2022-03-06 [1] RSPM (R 4.1.0) ## devtools 2.4.3 2021-11-30 [1] RSPM (R 4.1.0) ## digest 0.6.29 2021-12-01 [1] RSPM (R 4.1.0) ## ellipsis 0.3.2 2021-04-29 [1] RSPM (R 4.1.0) ## evaluate 0.15 2022-02-18 [1] RSPM (R 4.1.0) ## fastmap 1.1.0 2021-01-25 [1] RSPM (R 4.1.0) ## fs 1.5.2 2021-12-08 [1] RSPM (R 4.1.0) ## glue 1.6.2 2022-02-24 [1] RSPM (R 4.1.0) ## htmltools 0.5.2 2021-08-25 [1] RSPM (R 4.1.0) ## jquerylib 0.1.4 2021-04-26 [1] RSPM (R 4.1.0) ## jsonlite 1.8.0 2022-02-22 [1] RSPM (R 4.1.0) ## knitr 1.33 2023-03-22 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.1 2021-09-24 [1] RSPM (R 4.1.0) ## magrittr 2.0.3 2022-03-30 [1] RSPM (R 4.1.0) ## memoise 2.0.1 2021-11-26 [1] RSPM (R 4.1.0) ## pkgbuild 1.3.1 2021-12-20 [1] RSPM (R 4.1.0) ## pkgload 1.2.4 2021-11-30 [1] RSPM (R 4.1.0) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.1.0) ## processx 3.5.3 2022-03-25 [1] RSPM (R 4.1.0) ## ps 1.6.0 2021-02-28 [1] RSPM (R 4.1.0) ## purrr 0.3.4 2020-04-17 [1] RSPM (R 4.1.0) ## R6 2.5.1 2021-08-19 [1] RSPM (R 4.1.0) ## remotes 2.4.2 2021-11-30 [1] RSPM (R 4.1.0) ## rlang 1.0.2 2023-03-22 [1] Github (r-lib/rlang@34b04a8) ## rmarkdown 2.10 2023-03-22 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.3 2022-04-02 [1] CRAN (R 4.1.3) ## sass 0.4.1 2022-03-23 [1] RSPM (R 4.1.0) ## sessioninfo 1.2.2 2021-12-06 [1] RSPM (R 4.1.0) ## stringi 1.7.6 2021-11-29 [1] RSPM (R 4.1.0) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.1.0) ## testthat 3.0.1 2023-03-22 [1] Github (R-lib/testthat@e99155a) ## usethis 2.1.6.9000 2023-03-22 [1] Github (r-lib/usethis@b4b8623) ## withr 2.5.0 2022-03-03 [1] RSPM (R 4.1.0) ## xfun 0.26 2023-03-22 [1] Github (yihui/xfun@74c2a66) ## yaml 2.3.5 2022-02-21 [1] RSPM (R 4.1.0) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library ## ## ────────────────────────────────────────────────────────────────────────────── "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
